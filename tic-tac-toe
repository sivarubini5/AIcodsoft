class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # 3x3 Tic-Tac-Toe board
        self.current_winner = None  # Keep track of the winner!

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    @staticmethod
    def print_board_nums():
        # Tells us what number corresponds to what box - i.e., a helper for the first move
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square, letter):
        # Check the row
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
        # Check the column
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
        # Check diagonals
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]  # left to right diagonal
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]  # right to left diagonal
            if all([spot == letter for spot in diagonal2]):
                return True
        return False

def minimax(board, depth, is_maximizing, game):
    """
    Minimax algorithm without Alpha-Beta pruning. This can be optimized with pruning.
    """
    if game.current_winner == 'O':  # Assuming AI is 'O'
        return 1
    elif game.current_winner == 'X':  # Assuming human is 'X'
        return -1
    elif not game.empty_squares():  # Tie
        return 0

    if is_maximizing:
        best_score = float('-inf')
        for possible_move in game.available_moves():
            game.make_move(possible_move, 'O')
            score = minimax(board, depth+1, False, game)
            game.board[possible_move] = ' '
            game.current_winner = None
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for possible_move in game.available_moves():
            game.make_move(possible_move, 'X')
            score = minimax(board, depth+1, True, game)
            game.board[possible_move] = ' '
            game.current_winner = None
            best_score = min(score, best_score)
        return best_score

def best_move(game, player):
    best_position = None
    best_score = float('-inf') if player == 'O' else float('inf')

    for possible_move in game.available_moves():
        game.make_move(possible_move, player)
        score = minimax(game.board, 0, player == 'X', game)
        game.board[possible_move] = ' '  # Reset the move
        game.current_winner = None  # Reset the winner

        if player == 'O':
            if score > best_score:
                best_score = score
                best_position = possible_move
        else:
            if score < best_score:
                best_score = score
                best_position = possible_move

    return best_position

def play(game, x_player, o_player, print_game=True):
    if print_game:
        game.print_board_nums()

    letter = 'X'  # Starting letter
    # Iterate while the game still has empty squares
    # (We don't have to worry about winner because we'll just return that
    # which breaks the loop)
    while game.empty_squares():
        if letter == 'O':
            square = best_move(game, letter)
        else:
            valid_square = False
            while not valid_square:
                square = input(f"{letter}'s turn. Input move (0-8): ")
                try:
                    square = int(square)
                    if square not in game.available_moves():
                        raise ValueError
                    valid_square = True
                except ValueError:
                    print('Invalid square. Try again.')

        if game.make_move(square, letter):
            if print_game:
                print(f"{letter} makes a move to square {square}")
                game.print_board()
                print('')  # Just empty line

            if game.current_winner:
                if print_game:
                    print(letter + ' wins!')
                return letter  # Ends the loop and exits the game
            letter = 'O' if letter == 'X' else 'X'  # Switches player

        # tiny break
        if print_game:
            print('')

    if print_game:
        print('It\'s a tie!')

if __name__ == '__main__':
    x_player = 'human'
    o_player = 'ai'
    t = TicTacToe()
    play(t, x_player, o_player)
